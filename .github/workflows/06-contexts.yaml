name: 06 - Contexts
run-name: 06 - Contexts | DEBUG -${{inputs.debug}}

on:
  push:
    # 다만, input이 push event에는 정의되지 않았으므로
    # push event일때는 inputs.debug context를 사용할 수 없다
  workflow_dispatch:
    #
    inputs:
      # input name이 debug
      debug:
        type: boolean
        default: false

# Define env variable usauble at workflow, job, or step level
env:
  MY_WORKFLOW_VAR: "workflow"
  MY_OVERWRITTEN_VAR: "workflow"

jobs:
  echo-data:
    runs-on: ubuntu-latest
    env:
      MY_JOB_VAR: "job"
      MY_OVERWRITTEN_VAR: "job"
    steps:
      - name: Display information
        run: |
          echo "Event Name: ${{github.event_name}}"
          echo "Ref: ${{github.ref}}"
          echo "SHA: ${{github.sha}}"
          echo "Actor: ${{github.actor}}"
          echo "Run ID: ${{github.run_id}}"
          echo "Run number: ${{github.run_number}}"
      - name: Retrieve Variable
        run: |
          echo "Variable value: ${{vars.MY_VAR}}"
        # MY_VAR를 Repo에서 정의할것이기 때문에, 해당 변수가 존재하는지는
        # 실행 전에 알 수 없다. 그러므로 Warning이 발생하는 것

        # Repo settings → Security → Secrets and variables → Actions
        # 에서 더할 수 있고, 모든 action에서 사용 가능하다
      - name: "Print Env Variables :"
        env:
          MY_OVERWRITTEN_VAR: "step"
          # Overwriting workflow → job → step
        run: |
          echo "Workflow env: ${{env.MY_WORKFLOW_VAR}}"
          echo "Overwritten env: ${{env.MY_OVERWRITTEN_VAR}}"
